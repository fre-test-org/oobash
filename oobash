declare -A oob_parents
let oob_next_id=1

throw() {
    echo "!! $@" 1>&2
}

debug() {
    if [ -n "$DEBUG" ]; then
        echo "-- $@" 1>&2
    fi
}

object() {
    local this_object=${FUNCNAME[0]}
    if [ -z "$self" ]; then local self="$this_object"; fi
    local prop_name="$1"
    if [ -z "$prop_name" ]; then echo $self; return 0; fi
    shift

    local property="oob_object_${this_object}[$prop_name]"
    if [ "$1" == "=" ]; then
        shift
        eval "${property}=\"$@\""
    elif [ -n "$1" ]; then
        throw "Unexpected arguments: $@"
    else
        local value="${!property}"
        local type=$(type -t "$property")
        if read -t 0 -u 0; then
            local method_definition
            read -d '' method_definition
            source <(echo -e "$property () {\n$method_definition\n}")
        elif [ "$type" == "function" ]; then
            self=$self "$property" $@
        elif [ -n "$value" ]; then
            echo "$value"
        elif [ -n "${oob_parents[$this_object]}" ]; then
            self=$self super=$($self __class) "${oob_parents[$this_object]}" $prop_name $@
        else
            throw "Property not found: $prop_name"
        fi
    fi
}

object keys <<'EOF'
    local test_name="\${!oob_object_$self[@]}"
    eval echo "$test_name"
EOF

new() {
    local class=$1
    local name=$2
    if [[ -z "$class" || -z "$name" ]]; then
        throw "'new' requires two arguments (class and name)"
    fi
    if [ "$(type -t "$class")" !=  "function" ]; then
        throw "Can't instantiate '$class'"
    fi
    local object_definition=$(declare -f object)
    local instance_definition="${name}${object_definition#object}"
    # semicolons because eval is going to mash this into one line
    echo "declare -A oob_object_${name};"
    echo "$instance_definition;"
    echo "oob_parents[$name]=$class;"
    echo "$name __class = $class;"
    echo "$name __id = $oob_next_id;"
    echo "let oob_next_id++;"
}

eval $(new object class)
